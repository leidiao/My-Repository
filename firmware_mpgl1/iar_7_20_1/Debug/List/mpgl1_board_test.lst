###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        06/Jun/2016  13:15:26
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\application\mpgl1_board_test.c
#    Command line =  
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\application\mpgl1_board_test.c
#        -D MPGL1 --preprocess=cl
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\ -o
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        E:\EIE\arm\INC\c\DLib_Config_Normal.h -I
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\ -I
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\bsp\ -I
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\drivers\ -I
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I E:\EIE\arm\CMSIS\Include\
#    List file    =  
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\mpgl1_board_test.lst
#    Object file  =  
#        E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\mpgl1_board_test.o
#
###############################################################################

E:\EIE\EiE\MASTER\Razor_Atmel\firmware_mpgl1\application\mpgl1_board_test.c
      1          /**********************************************************************************************************************
      2          File: mpgl1_board_test.c                                                                
      3          
      4          Description:
      5          Application to completely test the MPGL1 Atmel development board, mpgl1-ehdw-02.
      6          **********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32BoardTestFlags;                       /* Global state flags */
   \                     G_u32BoardTestFlags:
   \   00000000                      DS8 4
     16          
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     21          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     22          
     23          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     24          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     25          
     26          extern u8 G_au8MessageOK[];                           /* From utilities.c */
     27          extern u8 G_au8MessageFAIL[];                         /* From utilities.c */
     28          
     29          extern u32 G_u32AntFlags;                             /* From ant.c */
     30          extern AntSetupDataType G_stAntSetupData;             /* From ant.c */
     31          
     32          extern u32 G_u32AntApiCurrentDataTimeStamp;                      /* From ant_api.c */
     33          extern AntApplicationMessageType G_eAntApiCurrentMessageClass;   /* From ant_api.c */
     34          extern u8 G_au8AntApiCurrentData[ANT_APPLICATION_MESSAGE_BYTES]; /* From ant_api.c */
     35          
     36          
     37          /***********************************************************************************************************************
     38          Global variable definitions with scope limited to this local application.
     39          Variable names shall start with "BoardTest_" and be declared as static.
     40          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     41          static fnCode_type BoardTest_StateMachine;            /* The state machine function pointer */
   \                     BoardTest_StateMachine:
   \   00000000                      DS8 4
     42          

   \                                 In section .bss, align 4
     43          static u32 BoardTest_u32Timeout;                      /* Timeout counter used across states */
                            ^
Warning[Pe550]: variable "BoardTest_u32Timeout" was set but never used
   \                     BoardTest_u32Timeout:
   \   00000000                      DS8 4
     44          
     45          
     46          /***********************************************************************************************************************
     47          Function Definitions
     48          ***********************************************************************************************************************/
     49          
     50          /*--------------------------------------------------------------------------------------------------------------------*/
     51          /* Public functions                                                                                                   */
     52          /*--------------------------------------------------------------------------------------------------------------------*/
     53          
     54          
     55          /*--------------------------------------------------------------------------------------------------------------------*/
     56          /* Protected functions                                                                                                */
     57          /*--------------------------------------------------------------------------------------------------------------------*/
     58          
     59          /*----------------------------------------------------------------------------------------------------------------------
     60          Function: BoardTestInitialize
     61          
     62          Description:
     63          Initializes the State Machine and its variables.
     64          
     65          Requires:
     66            -
     67          
     68          Promises:
     69            - 
     70          */

   \                                 In section .text, align 2, keep-with-next
     71          void BoardTestInitialize(void)
     72          {
   \                     BoardTestInitialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     73            u8 au8BoardTestStartupMsg[] = "Board test task started\n\r";
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable3
   \   0000000A   0x221A             MOVS     R2,#+26
   \   0000000C   0x.... 0x....      BL       __aeabi_memcpy
     74          
     75            /* Start with all LEDs on */
     76            LedOn(WHITE);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       LedOn
     77            LedOn(PURPLE);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       LedOn
     78            LedOn(BLUE);
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x.... 0x....      BL       LedOn
     79            LedOn(CYAN);
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0x.... 0x....      BL       LedOn
     80            LedOn(GREEN);
   \   00000028   0x2004             MOVS     R0,#+4
   \   0000002A   0x.... 0x....      BL       LedOn
     81            LedOn(YELLOW);
   \   0000002E   0x2005             MOVS     R0,#+5
   \   00000030   0x.... 0x....      BL       LedOn
     82            LedOn(ORANGE);
   \   00000034   0x2006             MOVS     R0,#+6
   \   00000036   0x.... 0x....      BL       LedOn
     83            LedOn(RED);
   \   0000003A   0x2007             MOVS     R0,#+7
   \   0000003C   0x.... 0x....      BL       LedOn
     84            LedOn(LCD_BLUE);
   \   00000040   0x200A             MOVS     R0,#+10
   \   00000042   0x.... 0x....      BL       LedOn
     85            LedOn(LCD_GREEN);
   \   00000046   0x2009             MOVS     R0,#+9
   \   00000048   0x.... 0x....      BL       LedOn
     86            LedOn(LCD_RED);
   \   0000004C   0x2008             MOVS     R0,#+8
   \   0000004E   0x.... 0x....      BL       LedOn
     87          
     88            /* Configure the ANT radio */
     89            G_stAntSetupData.AntChannel          = ANT_CHANNEL_BOARDTEST;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000058   0x7008             STRB     R0,[R1, #+0]
     90            G_stAntSetupData.AntChannelType      = ANT_CHANNEL_TYPE_BOARDTEST;
   \   0000005A   0x2010             MOVS     R0,#+16
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000060   0x7048             STRB     R0,[R1, #+1]
     91            G_stAntSetupData.AntNetwork          = ANT_NETWORK_BOARDTEST;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000068   0x7088             STRB     R0,[R1, #+2]
     92            G_stAntSetupData.AntSerialLo         = ANT_SERIAL_LO_BOARDTEST;
   \   0000006A   0x2055             MOVS     R0,#+85
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000070   0x70C8             STRB     R0,[R1, #+3]
     93            G_stAntSetupData.AntSerialHi         = ANT_SERIAL_HI_BOARDTEST;
   \   00000072   0x201B             MOVS     R0,#+27
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000078   0x7108             STRB     R0,[R1, #+4]
     94            G_stAntSetupData.AntDeviceType       = ANT_DEVICE_TYPE_BOARDTEST;
   \   0000007A   0x2060             MOVS     R0,#+96
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000080   0x7148             STRB     R0,[R1, #+5]
     95            G_stAntSetupData.AntTransmissionType = ANT_TRANSMISSION_TYPE_BOARDTEST;
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000088   0x7188             STRB     R0,[R1, #+6]
     96            G_stAntSetupData.AntChannelPeriodLo  = ANT_CHANNEL_PERIOD_LO_BOARDTEST;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000090   0x71C8             STRB     R0,[R1, #+7]
     97            G_stAntSetupData.AntChannelPeriodHi  = ANT_CHANNEL_PERIOD_HI_BOARDTEST;
   \   00000092   0x2020             MOVS     R0,#+32
   \   00000094   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000098   0x7208             STRB     R0,[R1, #+8]
     98            G_stAntSetupData.AntFrequency        = ANT_FREQUENCY_BOARDTEST;
   \   0000009A   0x2032             MOVS     R0,#+50
   \   0000009C   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   000000A0   0x7248             STRB     R0,[R1, #+9]
     99            G_stAntSetupData.AntTxPower          = ANT_TX_POWER_BOARDTEST;
   \   000000A2   0x2003             MOVS     R0,#+3
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   000000A8   0x7288             STRB     R0,[R1, #+10]
    100            
    101            /* Send all the channel config; 0 the message counter after so we clear the messsage from init */
    102            AntChannelConfig(ANT_MASTER);
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0x.... 0x....      BL       AntChannelConfig
    103            
    104            /* Init complete: print message, set function pointer and application flag */
    105            BoardTest_u32Timeout = G_u32SystemTime1ms;
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   000000BA   0x6008             STR      R0,[R1, #+0]
    106            DebugPrintf(au8BoardTestStartupMsg);
   \   000000BC   0xA800             ADD      R0,SP,#+0
   \   000000BE   0x.... 0x....      BL       DebugPrintf
    107            BoardTest_StateMachine = BoardTestSM_Idle;
   \   000000C2   0x.... 0x....      ADR.W    R0,BoardTestSM_Idle
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    108          
    109          } /* end BoardTestInitialize() */
   \   000000CC   0xB007             ADD      SP,SP,#+28
   \   000000CE   0xBD00             POP      {PC}             ;; return
    110          
    111          
    112          /*----------------------------------------------------------------------------------------------------------------------
    113          Function BoardTestRunActiveState()
    114          
    115          Description:
    116          Selects and runs one iteration of the current state in the state machine.
    117          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    118          may take 1ms / n to execute.
    119          
    120          Requires:
    121            - State machine function pointer points at current state
    122          
    123          Promises:
    124            - Calls the function to pointed by the state machine function pointer
    125          */

   \                                 In section .text, align 2, keep-with-next
    126          void BoardTestRunActiveState(void)
    127          {
   \                     BoardTestRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    128            BoardTest_StateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    129          
    130          } /* end BoardTestRunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    131          
    132          
    133          /*--------------------------------------------------------------------------------------------------------------------*/
    134          /* Private functions                                                                                                  */
    135          /*--------------------------------------------------------------------------------------------------------------------*/
    136          
    137          
    138          /***********************************************************************************************************************
    139          State Machine Function Definitions
    140          ***********************************************************************************************************************/
    141          
    142          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    143          void BoardTestSM_Idle(void)
    144          {
   \                     BoardTestSM_Idle: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
    145            static bool bButton0Test = FALSE;
    146            static u8 u8Button2Test = 0;
    147            static u8 u8Button3Test = 0;
    148            static u8 au8TestMessage[] = {0, 0, 0, 0, 0, 0, 0, 0};
    149            static u8 au8DataMessage[] = "ANT data: ";
    150            u8 au8DataContent[26];
    151            AntChannelStatusType eAntCurrentState;
    152          
    153                                    /* "01234567890123456789" */
    154            static const u8 au8Eng[] = "ENGENUICS RAZOR     ";
    155            static const u8 au8MPG[] = "ASCII DEV BOARD     ";
    156            u8 au8Temp1[21];
    157            u8 au8Temp2[21];
    158            
    159            static u8 u8ResetIndex = 0;
    160            static u8 u8Index = 0;
    161            static u32 u32LcdTimer;
    162          
    163            /* BUTTON0 toggles LEDs */
    164            if( WasButtonPressed(BUTTON0) )
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x.... 0x....      BL       WasButtonPressed
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD03D             BEQ.N    ??BoardTestSM_Idle_0
    165            {
    166              ButtonAcknowledge(BUTTON0);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       ButtonAcknowledge
    167              
    168              /* If test is active, deactivate it, put all LEDs back on */
    169              if(bButton0Test)
   \   00000014   0x....             LDR.N    R0,??DataTable3_5
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD01B             BEQ.N    ??BoardTestSM_Idle_1
    170              {
    171                bButton0Test = FALSE;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR.N    R1,??DataTable3_5
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    172          
    173                LedOn(WHITE);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       LedOn
    174                LedOn(PURPLE);
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       LedOn
    175                LedOn(BLUE);
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x.... 0x....      BL       LedOn
    176                LedOn(CYAN);
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x.... 0x....      BL       LedOn
    177                LedOn(GREEN);
   \   0000003A   0x2004             MOVS     R0,#+4
   \   0000003C   0x.... 0x....      BL       LedOn
    178                LedOn(YELLOW);
   \   00000040   0x2005             MOVS     R0,#+5
   \   00000042   0x.... 0x....      BL       LedOn
    179                LedOn(ORANGE);
   \   00000046   0x2006             MOVS     R0,#+6
   \   00000048   0x.... 0x....      BL       LedOn
    180                LedOn(RED);
   \   0000004C   0x2007             MOVS     R0,#+7
   \   0000004E   0x.... 0x....      BL       LedOn
   \   00000052   0xE01A             B.N      ??BoardTestSM_Idle_0
    181              }
    182              /* Else activate it: turn all LEDs off */
    183              else
    184              {
    185                bButton0Test = TRUE;
   \                     ??BoardTestSM_Idle_1: (+1)
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x....             LDR.N    R1,??DataTable3_5
   \   00000058   0x7008             STRB     R0,[R1, #+0]
    186          
    187                LedOff(WHITE);
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x.... 0x....      BL       LedOff
    188                LedOff(PURPLE);
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x.... 0x....      BL       LedOff
    189                LedOff(BLUE);
   \   00000066   0x2002             MOVS     R0,#+2
   \   00000068   0x.... 0x....      BL       LedOff
    190                LedOff(CYAN);
   \   0000006C   0x2003             MOVS     R0,#+3
   \   0000006E   0x.... 0x....      BL       LedOff
    191                LedOff(GREEN);
   \   00000072   0x2004             MOVS     R0,#+4
   \   00000074   0x.... 0x....      BL       LedOff
    192                LedOff(YELLOW);
   \   00000078   0x2005             MOVS     R0,#+5
   \   0000007A   0x.... 0x....      BL       LedOff
    193                LedOff(ORANGE);
   \   0000007E   0x2006             MOVS     R0,#+6
   \   00000080   0x.... 0x....      BL       LedOff
    194                LedOff(RED);
   \   00000084   0x2007             MOVS     R0,#+7
   \   00000086   0x.... 0x....      BL       LedOff
    195              }
    196            } /* End of BUTTON 0 test */
    197          
    198          /* BUTTON1 toggles the radio and buzzer test.  When the button is pressed,
    199            an open channel request is made.  The system monitors _ANT_FLAGS_CHANNEL_OPEN
    200            to control wether or not the buzzer is on. */
    201            
    202            /* Toggle the beeper and ANT radio on BUTTON1 */
    203            if( WasButtonPressed(BUTTON1) )
   \                     ??BoardTestSM_Idle_0: (+1)
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x.... 0x....      BL       WasButtonPressed
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD00F             BEQ.N    ??BoardTestSM_Idle_2
    204            {
    205              ButtonAcknowledge(BUTTON1);
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x.... 0x....      BL       ButtonAcknowledge
    206              eAntCurrentState = AntRadioStatus();
   \   0000009A   0x.... 0x....      BL       AntRadioStatus
   \   0000009E   0x0004             MOVS     R4,R0
    207          
    208              if(eAntCurrentState == ANT_CLOSED )
   \   000000A0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A2   0x2C05             CMP      R4,#+5
   \   000000A4   0xD101             BNE.N    ??BoardTestSM_Idle_3
    209              {
    210                 AntOpenChannel();
   \   000000A6   0x.... 0x....      BL       AntOpenChannel
    211              }
    212          
    213              if(eAntCurrentState == ANT_OPEN)
   \                     ??BoardTestSM_Idle_3: (+1)
   \   000000AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AC   0x2C03             CMP      R4,#+3
   \   000000AE   0xD101             BNE.N    ??BoardTestSM_Idle_2
    214              {
    215                 AntCloseChannel();
   \   000000B0   0x.... 0x....      BL       AntCloseChannel
    216              }
    217            }
    218           
    219           
    220          #if 0
    221            /* Monitor the CHANNEL_OPEN flag to decide whether or not audio should be on */
    222            if( (AntRadioStatus() == ANT_OPEN ) && !(BoardTest_u32Flags & _AUDIO_ANT_ON) )
    223            {
    224              PWMAudioOn(BUZZER1);
    225              BoardTest_u32Flags |= _AUDIO_ANT_ON;
    226            }
    227            
    228            if( AntRadioStatus() == ANT_CLOSED )
    229            {
    230              PWMAudioOff(BUZZER1);
    231              BoardTest_u32Flags &= ~_AUDIO_ANT_ON;
    232            }
    233          #endif
    234            
    235            /* Process ANT Application messages */  
    236                  
    237            if( AntReadData() )
   \                     ??BoardTestSM_Idle_2: (+1)
   \   000000B4   0x.... 0x....      BL       AntReadData
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD05E             BEQ.N    ??BoardTestSM_Idle_4
    238            {
    239               /* New data message: check what it is */
    240              if(G_eAntApiCurrentMessageClass == ANT_DATA)
   \   000000BC   0x....             LDR.N    R0,??DataTable3_6
   \   000000BE   0x7800             LDRB     R0,[R0, #+0]
   \   000000C0   0x2801             CMP      R0,#+1
   \   000000C2   0xD13C             BNE.N    ??BoardTestSM_Idle_5
    241              {
    242                /* We got some data: print it */
    243                for(u8 i = 0; i < ANT_DATA_BYTES; i++)
   \   000000C4   0x2500             MOVS     R5,#+0
   \                     ??BoardTestSM_Idle_6: (+1)
   \   000000C6   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C8   0x2D08             CMP      R5,#+8
   \   000000CA   0xDA28             BGE.N    ??BoardTestSM_Idle_7
    244                {
    245                  au8DataContent[3 * i]     = HexToASCIICharUpper(G_au8AntApiCurrentData[i] / 16);
   \   000000CC   0x....             LDR.N    R0,??DataTable3_7
   \   000000CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D0   0x5C28             LDRB     R0,[R5, R0]
   \   000000D2   0x2110             MOVS     R1,#+16
   \   000000D4   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0x.... 0x....      BL       HexToASCIICharUpper
   \   000000DE   0xA900             ADD      R1,SP,#+0
   \   000000E0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000E2   0x2203             MOVS     R2,#+3
   \   000000E4   0xFB02 0x1105      MLA      R1,R2,R5,R1
   \   000000E8   0x7008             STRB     R0,[R1, #+0]
    246                  au8DataContent[3 * i + 1] = HexToASCIICharUpper(G_au8AntApiCurrentData[i] % 16);
   \   000000EA   0x....             LDR.N    R0,??DataTable3_7
   \   000000EC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EE   0x5C29             LDRB     R1,[R5, R0]
   \   000000F0   0x2210             MOVS     R2,#+16
   \   000000F2   0xFB91 0xF0F2      SDIV     R0,R1,R2
   \   000000F6   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   000000FA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FC   0x.... 0x....      BL       HexToASCIICharUpper
   \   00000100   0xA900             ADD      R1,SP,#+0
   \   00000102   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000104   0x2203             MOVS     R2,#+3
   \   00000106   0xFB02 0x1105      MLA      R1,R2,R5,R1
   \   0000010A   0x7048             STRB     R0,[R1, #+1]
    247                  au8DataContent[3 * i + 2] = '-';
   \   0000010C   0x202D             MOVS     R0,#+45
   \   0000010E   0xA900             ADD      R1,SP,#+0
   \   00000110   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000112   0x2203             MOVS     R2,#+3
   \   00000114   0xFB02 0x1105      MLA      R1,R2,R5,R1
   \   00000118   0x7088             STRB     R0,[R1, #+2]
    248                }
   \   0000011A   0x1C6D             ADDS     R5,R5,#+1
   \   0000011C   0xE7D3             B.N      ??BoardTestSM_Idle_6
    249                au8DataContent[23] = '\n';
   \                     ??BoardTestSM_Idle_7: (+1)
   \   0000011E   0x200A             MOVS     R0,#+10
   \   00000120   0xF88D 0x0017      STRB     R0,[SP, #+23]
    250                au8DataContent[24] = '\r';
   \   00000124   0x200D             MOVS     R0,#+13
   \   00000126   0xF88D 0x0018      STRB     R0,[SP, #+24]
    251                au8DataContent[25] = '\0';
   \   0000012A   0x2000             MOVS     R0,#+0
   \   0000012C   0xF88D 0x0019      STRB     R0,[SP, #+25]
    252                
    253                DebugPrintf(au8DataMessage);
   \   00000130   0x....             LDR.N    R0,??DataTable3_8
   \   00000132   0x.... 0x....      BL       DebugPrintf
    254                DebugPrintf(au8DataContent);
   \   00000136   0xA800             ADD      R0,SP,#+0
   \   00000138   0x.... 0x....      BL       DebugPrintf
   \   0000013C   0xE01D             B.N      ??BoardTestSM_Idle_4
    255              }
    256              else if(G_eAntApiCurrentMessageClass == ANT_TICK)
   \                     ??BoardTestSM_Idle_5: (+1)
   \   0000013E   0x....             LDR.N    R0,??DataTable3_6
   \   00000140   0x7800             LDRB     R0,[R0, #+0]
   \   00000142   0x2802             CMP      R0,#+2
   \   00000144   0xD119             BNE.N    ??BoardTestSM_Idle_4
    257              {
    258          
    259               /* Update and queue the new message data */
    260                au8TestMessage[7]++;
   \   00000146   0x....             LDR.N    R0,??DataTable3_9
   \   00000148   0x79C0             LDRB     R0,[R0, #+7]
   \   0000014A   0x1C40             ADDS     R0,R0,#+1
   \   0000014C   0x....             LDR.N    R1,??DataTable3_9
   \   0000014E   0x71C8             STRB     R0,[R1, #+7]
    261                if(au8TestMessage[7] == 0)
   \   00000150   0x....             LDR.N    R0,??DataTable3_9
   \   00000152   0x79C0             LDRB     R0,[R0, #+7]
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD10D             BNE.N    ??BoardTestSM_Idle_8
    262                {
    263                  au8TestMessage[6]++;
   \   00000158   0x....             LDR.N    R0,??DataTable3_9
   \   0000015A   0x7980             LDRB     R0,[R0, #+6]
   \   0000015C   0x1C40             ADDS     R0,R0,#+1
   \   0000015E   0x....             LDR.N    R1,??DataTable3_9
   \   00000160   0x7188             STRB     R0,[R1, #+6]
    264                  if(au8TestMessage[6] == 0)
   \   00000162   0x....             LDR.N    R0,??DataTable3_9
   \   00000164   0x7980             LDRB     R0,[R0, #+6]
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD104             BNE.N    ??BoardTestSM_Idle_8
    265                  {
    266                    au8TestMessage[5]++;
   \   0000016A   0x....             LDR.N    R0,??DataTable3_9
   \   0000016C   0x7940             LDRB     R0,[R0, #+5]
   \   0000016E   0x1C40             ADDS     R0,R0,#+1
   \   00000170   0x....             LDR.N    R1,??DataTable3_9
   \   00000172   0x7148             STRB     R0,[R1, #+5]
    267                  }
    268                }
    269                AntQueueBroadcastMessage(au8TestMessage);
   \                     ??BoardTestSM_Idle_8: (+1)
   \   00000174   0x....             LDR.N    R0,??DataTable3_9
   \   00000176   0x.... 0x....      BL       AntQueueBroadcastMessage
    270              }
    271            }
    272          
    273            /* BUTTON2 toggles LCD backlights */
    274            if( WasButtonPressed(BUTTON2) )
   \                     ??BoardTestSM_Idle_4: (+1)
   \   0000017A   0x2002             MOVS     R0,#+2
   \   0000017C   0x.... 0x....      BL       WasButtonPressed
   \   00000180   0x2800             CMP      R0,#+0
   \   00000182   0xD04E             BEQ.N    ??BoardTestSM_Idle_9
    275            {
    276              ButtonAcknowledge(BUTTON2);
   \   00000184   0x2002             MOVS     R0,#+2
   \   00000186   0x.... 0x....      BL       ButtonAcknowledge
    277              
    278              /* If test is active, deactivate it, put all LEDs back on */
    279              switch(u8Button2Test)
   \   0000018A   0x....             LDR.N    R0,??DataTable3_10
   \   0000018C   0x7800             LDRB     R0,[R0, #+0]
   \   0000018E   0x2800             CMP      R0,#+0
   \   00000190   0xD006             BEQ.N    ??BoardTestSM_Idle_10
   \   00000192   0x2802             CMP      R0,#+2
   \   00000194   0xD01E             BEQ.N    ??BoardTestSM_Idle_11
   \   00000196   0xD310             BCC.N    ??BoardTestSM_Idle_12
   \   00000198   0x2804             CMP      R0,#+4
   \   0000019A   0xD035             BEQ.N    ??BoardTestSM_Idle_13
   \   0000019C   0xD327             BCC.N    ??BoardTestSM_Idle_14
   \   0000019E   0xE040             B.N      ??BoardTestSM_Idle_15
    280              {
    281                case 0:
    282                  u8Button2Test = 1;
   \                     ??BoardTestSM_Idle_10: (+1)
   \   000001A0   0x2001             MOVS     R0,#+1
   \   000001A2   0x....             LDR.N    R1,??DataTable3_10
   \   000001A4   0x7008             STRB     R0,[R1, #+0]
    283          
    284                  LedOff(LCD_RED);
   \   000001A6   0x2008             MOVS     R0,#+8
   \   000001A8   0x.... 0x....      BL       LedOff
    285                  LedOff(LCD_GREEN);
   \   000001AC   0x2009             MOVS     R0,#+9
   \   000001AE   0x.... 0x....      BL       LedOff
    286                  LedOff(LCD_BLUE);
   \   000001B2   0x200A             MOVS     R0,#+10
   \   000001B4   0x.... 0x....      BL       LedOff
    287                  break;
   \   000001B8   0xE033             B.N      ??BoardTestSM_Idle_9
    288          
    289                case 1:
    290                  u8Button2Test = 2;
   \                     ??BoardTestSM_Idle_12: (+1)
   \   000001BA   0x2002             MOVS     R0,#+2
   \   000001BC   0x....             LDR.N    R1,??DataTable3_10
   \   000001BE   0x7008             STRB     R0,[R1, #+0]
    291          
    292                  LedOn(LCD_RED);
   \   000001C0   0x2008             MOVS     R0,#+8
   \   000001C2   0x.... 0x....      BL       LedOn
    293                  LedOff(LCD_GREEN);
   \   000001C6   0x2009             MOVS     R0,#+9
   \   000001C8   0x.... 0x....      BL       LedOff
    294                  LedOff(LCD_BLUE);
   \   000001CC   0x200A             MOVS     R0,#+10
   \   000001CE   0x.... 0x....      BL       LedOff
    295                  break;
   \   000001D2   0xE026             B.N      ??BoardTestSM_Idle_9
    296          
    297                case 2:
    298                  u8Button2Test = 3;
   \                     ??BoardTestSM_Idle_11: (+1)
   \   000001D4   0x2003             MOVS     R0,#+3
   \   000001D6   0x....             LDR.N    R1,??DataTable3_10
   \   000001D8   0x7008             STRB     R0,[R1, #+0]
    299          
    300                  LedOff(LCD_RED);
   \   000001DA   0x2008             MOVS     R0,#+8
   \   000001DC   0x.... 0x....      BL       LedOff
    301                  LedOn(LCD_GREEN);
   \   000001E0   0x2009             MOVS     R0,#+9
   \   000001E2   0x.... 0x....      BL       LedOn
    302                  LedOff(LCD_BLUE);
   \   000001E6   0x200A             MOVS     R0,#+10
   \   000001E8   0x.... 0x....      BL       LedOff
    303                  break;
   \   000001EC   0xE019             B.N      ??BoardTestSM_Idle_9
    304          
    305                case 3:
    306                  u8Button2Test = 4;
   \                     ??BoardTestSM_Idle_14: (+1)
   \   000001EE   0x2004             MOVS     R0,#+4
   \   000001F0   0x....             LDR.N    R1,??DataTable3_10
   \   000001F2   0x7008             STRB     R0,[R1, #+0]
    307          
    308                  LedOff(LCD_RED);
   \   000001F4   0x2008             MOVS     R0,#+8
   \   000001F6   0x.... 0x....      BL       LedOff
    309                  LedOff(LCD_GREEN);
   \   000001FA   0x2009             MOVS     R0,#+9
   \   000001FC   0x.... 0x....      BL       LedOff
    310                  LedOn(LCD_BLUE);
   \   00000200   0x200A             MOVS     R0,#+10
   \   00000202   0x.... 0x....      BL       LedOn
    311                  break;
   \   00000206   0xE00C             B.N      ??BoardTestSM_Idle_9
    312          
    313                case 4:
    314                  u8Button2Test = 0;
   \                     ??BoardTestSM_Idle_13: (+1)
   \   00000208   0x2000             MOVS     R0,#+0
   \   0000020A   0x....             LDR.N    R1,??DataTable3_10
   \   0000020C   0x7008             STRB     R0,[R1, #+0]
    315          
    316                  LedOn(LCD_RED);
   \   0000020E   0x2008             MOVS     R0,#+8
   \   00000210   0x.... 0x....      BL       LedOn
    317                  LedOn(LCD_GREEN);
   \   00000214   0x2009             MOVS     R0,#+9
   \   00000216   0x.... 0x....      BL       LedOn
    318                  LedOn(LCD_BLUE);
   \   0000021A   0x200A             MOVS     R0,#+10
   \   0000021C   0x.... 0x....      BL       LedOn
    319                  break;
   \   00000220   0xE7FF             B.N      ??BoardTestSM_Idle_9
    320                  
    321                default:
    322                  break;
    323              }
    324            } /* End of BUTTON 2 test */
    325          
    326            /* BUTTON3 toggles buzzer test */
    327            if( WasButtonPressed(BUTTON3) )
   \                     ??BoardTestSM_Idle_15: (+1)
   \                     ??BoardTestSM_Idle_9: (+1)
   \   00000222   0x2003             MOVS     R0,#+3
   \   00000224   0x.... 0x....      BL       WasButtonPressed
   \   00000228   0x2800             CMP      R0,#+0
   \   0000022A   0xD032             BEQ.N    ??BoardTestSM_Idle_16
    328            {
    329              ButtonAcknowledge(BUTTON3);
   \   0000022C   0x2003             MOVS     R0,#+3
   \   0000022E   0x.... 0x....      BL       ButtonAcknowledge
    330              
    331              /* If test is active, deactivate it, put all LEDs back on */
    332              switch(u8Button3Test)
   \   00000232   0x....             LDR.N    R0,??DataTable3_11
   \   00000234   0x7800             LDRB     R0,[R0, #+0]
   \   00000236   0x2800             CMP      R0,#+0
   \   00000238   0xD003             BEQ.N    ??BoardTestSM_Idle_17
   \   0000023A   0x2802             CMP      R0,#+2
   \   0000023C   0xD01F             BEQ.N    ??BoardTestSM_Idle_18
   \   0000023E   0xD30F             BCC.N    ??BoardTestSM_Idle_19
   \   00000240   0xE027             B.N      ??BoardTestSM_Idle_20
    333              {
    334                case 0:
    335                  u8Button3Test = 1;
   \                     ??BoardTestSM_Idle_17: (+1)
   \   00000242   0x2001             MOVS     R0,#+1
   \   00000244   0x....             LDR.N    R1,??DataTable3_11
   \   00000246   0x7008             STRB     R0,[R1, #+0]
    336          
    337                  PWMAudioSetFrequency(BUZZER2, 1000);
   \   00000248   0xF44F 0x717A      MOV      R1,#+1000
   \   0000024C   0x2002             MOVS     R0,#+2
   \   0000024E   0x.... 0x....      BL       PWMAudioSetFrequency
    338                  PWMAudioOff(BUZZER1);
   \   00000252   0x2001             MOVS     R0,#+1
   \   00000254   0x.... 0x....      BL       PWMAudioOff
    339                  PWMAudioOn(BUZZER2);
   \   00000258   0x2002             MOVS     R0,#+2
   \   0000025A   0x.... 0x....      BL       PWMAudioOn
    340                  break;
   \   0000025E   0xE018             B.N      ??BoardTestSM_Idle_16
    341          
    342                case 1:
    343                  u8Button3Test = 2;
   \                     ??BoardTestSM_Idle_19: (+1)
   \   00000260   0x2002             MOVS     R0,#+2
   \   00000262   0x....             LDR.N    R1,??DataTable3_11
   \   00000264   0x7008             STRB     R0,[R1, #+0]
    344          
    345                  PWMAudioSetFrequency(BUZZER1, 500);
   \   00000266   0xF44F 0x71FA      MOV      R1,#+500
   \   0000026A   0x2001             MOVS     R0,#+1
   \   0000026C   0x.... 0x....      BL       PWMAudioSetFrequency
    346                  PWMAudioOn(BUZZER1);
   \   00000270   0x2001             MOVS     R0,#+1
   \   00000272   0x.... 0x....      BL       PWMAudioOn
    347                  PWMAudioOff(BUZZER2);
   \   00000276   0x2002             MOVS     R0,#+2
   \   00000278   0x.... 0x....      BL       PWMAudioOff
    348                  break;
   \   0000027C   0xE009             B.N      ??BoardTestSM_Idle_16
    349          
    350                case 2:
    351                  u8Button3Test = 0;
   \                     ??BoardTestSM_Idle_18: (+1)
   \   0000027E   0x2000             MOVS     R0,#+0
   \   00000280   0x....             LDR.N    R1,??DataTable3_11
   \   00000282   0x7008             STRB     R0,[R1, #+0]
    352          
    353                  PWMAudioOff(BUZZER1);
   \   00000284   0x2001             MOVS     R0,#+1
   \   00000286   0x.... 0x....      BL       PWMAudioOff
    354                  PWMAudioOff(BUZZER2);
   \   0000028A   0x2002             MOVS     R0,#+2
   \   0000028C   0x.... 0x....      BL       PWMAudioOff
    355                  break;
   \   00000290   0xE7FF             B.N      ??BoardTestSM_Idle_16
    356                 
    357                default:
    358                  break;
    359              }
    360            } /* End of BUTTON 3 test */
    361          
    362            
    363            /* LCD scrolling message */
    364            if(IsTimeUp(&u32LcdTimer, 200))
   \                     ??BoardTestSM_Idle_20: (+1)
   \                     ??BoardTestSM_Idle_16: (+1)
   \   00000292   0x21C8             MOVS     R1,#+200
   \   00000294   0x....             LDR.N    R0,??DataTable3_12
   \   00000296   0x.... 0x....      BL       IsTimeUp
   \   0000029A   0x2800             CMP      R0,#+0
   \   0000029C   0xD041             BEQ.N    ??BoardTestSM_Idle_21
    365            {
    366              u32LcdTimer = G_u32SystemTime1ms;
   \   0000029E   0x....             LDR.N    R0,??DataTable3_2
   \   000002A0   0x6800             LDR      R0,[R0, #+0]
   \   000002A2   0x....             LDR.N    R1,??DataTable3_12
   \   000002A4   0x6008             STR      R0,[R1, #+0]
    367              au8Temp1[20] = NULL;
   \   000002A6   0x2000             MOVS     R0,#+0
   \   000002A8   0xF88D 0x0048      STRB     R0,[SP, #+72]
    368              au8Temp2[20] = NULL;
   \   000002AC   0x2000             MOVS     R0,#+0
   \   000002AE   0xF88D 0x0030      STRB     R0,[SP, #+48]
    369              u8Index = u8ResetIndex;
   \   000002B2   0x....             LDR.N    R0,??DataTable3_13
   \   000002B4   0x7800             LDRB     R0,[R0, #+0]
   \   000002B6   0x....             LDR.N    R1,??DataTable3_14
   \   000002B8   0x7008             STRB     R0,[R1, #+0]
    370              for(u8 i = 0; i < 20; i++)
   \   000002BA   0x2000             MOVS     R0,#+0
   \                     ??BoardTestSM_Idle_22: (+1)
   \   000002BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002BE   0x2814             CMP      R0,#+20
   \   000002C0   0xDA1B             BGE.N    ??BoardTestSM_Idle_23
    371              { 
    372                if( u8Index == 20)
   \   000002C2   0x....             LDR.N    R1,??DataTable3_14
   \   000002C4   0x7809             LDRB     R1,[R1, #+0]
   \   000002C6   0x2914             CMP      R1,#+20
   \   000002C8   0xD102             BNE.N    ??BoardTestSM_Idle_24
    373                {
    374                  u8Index = 0; 
   \   000002CA   0x2100             MOVS     R1,#+0
   \   000002CC   0x....             LDR.N    R2,??DataTable3_14
   \   000002CE   0x7011             STRB     R1,[R2, #+0]
    375                }
    376                au8Temp1[u8Index] = au8Eng[i];
   \                     ??BoardTestSM_Idle_24: (+1)
   \   000002D0   0x....             LDR.N    R1,??DataTable3_15
   \   000002D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002D4   0x5C41             LDRB     R1,[R0, R1]
   \   000002D6   0xAA0D             ADD      R2,SP,#+52
   \   000002D8   0x....             LDR.N    R3,??DataTable3_14
   \   000002DA   0x781B             LDRB     R3,[R3, #+0]
   \   000002DC   0x5499             STRB     R1,[R3, R2]
    377                au8Temp2[u8Index] = au8MPG[i];
   \   000002DE   0x....             LDR.N    R1,??DataTable3_16
   \   000002E0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002E2   0x5C41             LDRB     R1,[R0, R1]
   \   000002E4   0xAA07             ADD      R2,SP,#+28
   \   000002E6   0x....             LDR.N    R3,??DataTable3_14
   \   000002E8   0x781B             LDRB     R3,[R3, #+0]
   \   000002EA   0x5499             STRB     R1,[R3, R2]
    378                u8Index++;
   \   000002EC   0x....             LDR.N    R1,??DataTable3_14
   \   000002EE   0x7809             LDRB     R1,[R1, #+0]
   \   000002F0   0x1C49             ADDS     R1,R1,#+1
   \   000002F2   0x....             LDR.N    R2,??DataTable3_14
   \   000002F4   0x7011             STRB     R1,[R2, #+0]
    379              }
   \   000002F6   0x1C40             ADDS     R0,R0,#+1
   \   000002F8   0xE7E0             B.N      ??BoardTestSM_Idle_22
    380              
    381              LCDMessage(LINE1_START_ADDR, au8Temp1);
   \                     ??BoardTestSM_Idle_23: (+1)
   \   000002FA   0xA90D             ADD      R1,SP,#+52
   \   000002FC   0x2000             MOVS     R0,#+0
   \   000002FE   0x.... 0x....      BL       LCDMessage
    382              LCDMessage(LINE2_START_ADDR, au8Temp2);
   \   00000302   0xA907             ADD      R1,SP,#+28
   \   00000304   0x2040             MOVS     R0,#+64
   \   00000306   0x.... 0x....      BL       LCDMessage
    383              
    384              if(u8ResetIndex == 0)
   \   0000030A   0x....             LDR.N    R0,??DataTable3_13
   \   0000030C   0x7800             LDRB     R0,[R0, #+0]
   \   0000030E   0x2800             CMP      R0,#+0
   \   00000310   0xD102             BNE.N    ??BoardTestSM_Idle_25
    385              {
    386                u8ResetIndex = 21;
   \   00000312   0x2015             MOVS     R0,#+21
   \   00000314   0x....             LDR.N    R1,??DataTable3_13
   \   00000316   0x7008             STRB     R0,[R1, #+0]
    387              }
    388          
    389              u8ResetIndex--;
   \                     ??BoardTestSM_Idle_25: (+1)
   \   00000318   0x....             LDR.N    R0,??DataTable3_13
   \   0000031A   0x7800             LDRB     R0,[R0, #+0]
   \   0000031C   0x1E40             SUBS     R0,R0,#+1
   \   0000031E   0x....             LDR.N    R1,??DataTable3_13
   \   00000320   0x7008             STRB     R0,[R1, #+0]
    390          
    391            }
    392            
    393          } /* end BoardTestSM_Idle() */
   \                     ??BoardTestSM_Idle_21: (+1)
   \   00000322   0xB013             ADD      SP,SP,#+76
   \   00000324   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .bss, align 1
   \                     ??bButton0Test:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8Button2Test:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8Button3Test:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??au8TestMessage:
   \   00000000                      DS8 8

   \                                 In section .data, align 4
   \                     ??au8DataMessage:
   \   00000000   0x41 0x4E          DC8 "ANT data: "
   \              0x54 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x3A 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ??au8Eng:
   \   00000000   0x45 0x4E          DC8 "ENGENUICS RAZOR     "
   \              0x47 0x45    
   \              0x4E 0x55    
   \              0x49 0x43    
   \              0x53 0x20    
   \              0x52 0x41    
   \              0x5A 0x4F    
   \              0x52 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ??au8MPG:
   \   00000000   0x41 0x53          DC8 "ASCII DEV BOARD     "
   \              0x43 0x49    
   \              0x49 0x20    
   \              0x44 0x45    
   \              0x56 0x20    
   \              0x42 0x4F    
   \              0x41 0x52    
   \              0x44 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .bss, align 1
   \                     ??u8ResetIndex:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8Index:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??u32LcdTimer:
   \   00000000                      DS8 4
    394          
    395          
    396          /*--------------------------------------------------------------------------------------------------------------------*/
    397          /* Handle an error */

   \                                 In section .text, align 2, keep-with-next
    398          void BoardTestSM_Error(void)          
    399          {
    400            BoardTest_StateMachine = BoardTestSM_Idle;
   \                     BoardTestSM_Error: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_17
   \   00000002   0x....             LDR.N    R1,??DataTable3_4
   \   00000004   0x6008             STR      R0,[R1, #+0]
    401            
    402          } /* end BoardTestSM_Error() */
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     G_stAntSetupData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     BoardTest_u32Timeout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     BoardTest_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ??bButton0Test

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     G_eAntApiCurrentMessageClass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     G_au8AntApiCurrentData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     ??au8DataMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     ??au8TestMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     ??u8Button2Test

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     ??u8Button3Test

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     ??u32LcdTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     ??u8ResetIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     ??u8Index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     ??au8Eng

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x........         DC32     ??au8MPG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x........         DC32     BoardTestSM_Idle

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x42 0x6F          DC8 "Board test task started\012\015"
   \              0x61 0x72    
   \              0x64 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x74    
   \              0x61 0x73    
   \              0x6B 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x65    
   \              0x64 0x0A    
   \              0x0D 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0
    403          
    404          
    405          
    406          /*--------------------------------------------------------------------------------------------------------------------*/
    407          /* End of File                                                                                                        */
    408          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   BoardTestInitialize
        32   -> AntChannelConfig
        32   -> DebugPrintf
        32   -> LedOn
        32   -> __aeabi_memcpy
       8   BoardTestRunActiveState
         8   -- Indirect call
       0   BoardTestSM_Error
      88   BoardTestSM_Idle
        88   -> AntCloseChannel
        88   -> AntOpenChannel
        88   -> AntQueueBroadcastMessage
        88   -> AntRadioStatus
        88   -> AntReadData
        88   -> ButtonAcknowledge
        88   -> DebugPrintf
        88   -> HexToASCIICharUpper
        88   -> IsTimeUp
        88   -> LCDMessage
        88   -> LedOff
        88   -> LedOn
        88   -> PWMAudioOff
        88   -> PWMAudioOn
        88   -> PWMAudioSetFrequency
        88   -> WasButtonPressed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      28  ?_0
     208  BoardTestInitialize
      12  BoardTestRunActiveState
       8  BoardTestSM_Error
     806  BoardTestSM_Idle
       4  BoardTest_StateMachine
       4  BoardTest_u32Timeout
       4  G_u32BoardTestFlags
      12  au8DataMessage
      24  au8Eng
      24  au8MPG
       8  au8TestMessage
       1  bButton0Test
       4  u32LcdTimer
       1  u8Button2Test
       1  u8Button3Test
       1  u8Index
       1  u8ResetIndex

 
    29 bytes in section .bss
    12 bytes in section .data
    76 bytes in section .rodata
 1 106 bytes in section .text
 
 1 106 bytes of CODE  memory
    76 bytes of CONST memory
    41 bytes of DATA  memory

Errors: none
Warnings: 1
